<tokens>
<keyword> class </keyword>
<identifier> classname </identifier>
<symbol> { </symbol>
<keyword> static </keyword>
<keyword> int </keyword>
<identifier> VARNAME1 </identifier>
<symbol> ; </symbol>
<keyword> static </keyword>
<keyword> int </keyword>
<identifier> VARNAME2 </identifier>
<symbol> ; </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> fart </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> int_var </identifier>
<symbol> , </symbol>
<keyword> char </keyword>
<identifier> char_var </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> cool </identifier>
<symbol> , </symbol>
<identifier> coolio </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> char </keyword>
<identifier> c </identifier>
<symbol> , </symbol>
<identifier> b </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> c </identifier>
<symbol> = </symbol>
<identifier> expression </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> c </identifier>
<symbol> [ </symbol>
<identifier> expression </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> expression </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> expression </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> c </identifier>
<symbol> = </symbol>
<identifier> expression </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> c </identifier>
<symbol> = </symbol>
<identifier> expression </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> expression </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> expression </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> c </identifier>
<symbol> = </symbol>
<identifier> expression </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> subroutineCall </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> expression </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> constructor </keyword>
<keyword> int </keyword>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> param1 </identifier>
<symbol> , </symbol>
<identifier> bool </identifier>
<identifier> param2 </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> cool2 </identifier>
<symbol> , </symbol>
<identifier> coolio2 </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> char </keyword>
<identifier> g </identifier>
<symbol> , </symbol>
<identifier> h </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>
